-- player.script
-- these are the tweaks for the mechanics, feel free to change them for a different feeling
-- the acceleration to move right/left
local move_acceleration = 3500
-- acceleration factor to use when air-borne
local air_acceleration_factor = 0.8
-- max speed right/left
local max_speed = 100
-- gravity pulling the player down in pixel units
local gravity = -1000
-- take-off speed when jumping in pixel units
local jump_takeoff_speed = 300
-- time within a double tap must occur to be considered a jump (only used for mouse/touch controls)
local touch_jump_timeout = 0.2

--- AI 
local minDist = 90
local firerate = 120
local spotDist = 180
local randomness = 50
-- pre-hashing ids improves performance
local msg_contact_point_response = hash("contact_point_response")
local msg_animation_done = hash("animation_done")
local group_obstacle = hash("obstacle")


function init(self)

	-- this lets us handle input in this script

	-- initial player velocity
	self.velocity = vmath.vector3(0, 0, 0)
	-- support variable to keep track of collisions and separation
	self.correction = vmath.vector3()
	-- if the player stands on ground or not
	self.ground_contact = false
	-- movement input in the range [-1,1]
	self.move_input = 0
	-- the currently playing animation
	self.anim = nil
	-- timer that controls the jump-window when using mouse/touch
	self.touch_jump_timer = 0
	self.side = false
	self.players_sword_speed = 0
	self.hp = 100
	self.frame = 0
	self.dir = 1
	self.minDist = minDist
end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.anim ~= anim then
		-- tell the sprite to play the animation
		sprite.play_flipbook("#sprite", anim)
		-- remember which animation is playing
		self.anim = anim
	end
end

local function update_animations(self)
	-- make sure the player character faces the right way

	-- make sure the right animation is playing
	if self.ground_contact then
		if self.velocity.x == 0 then
		else
		end
	else
		if self.velocity.y > 0 then
			play_animation(self, anim_jump)
		else
			play_animation(self, anim_fall)
		end
	end
end

function fixed_update(self, dt)
	local playerpos = go.get_position("/Player")
	local pos = go.get_position()
	if self.frame > firerate and math.abs(pos.x - playerpos.x) < spotDist then
		self.frame = 0
		local playerpos = go.get_position("/Player")
		local pos = go.get_position()
		local rotation = vmath.quat_rotation_z(math.atan2(playerpos.y - pos.y, playerpos.x - pos.x))
		factory.create("#arrow spawner", go.get_position() + vmath.vector3(self.dir * 10, 0, 0), rotation)
	end
	self.frame = self.frame + 1
end
function update(self, dt)
	ai(self, dt)
	-- determine the target speed based on input
	local target_speed = self.move_input * max_speed
	-- calculate the difference between our current speed and the target speed
	local speed_diff = target_speed - self.velocity.x
	-- the complete acceleration to integrate over this frame
	local acceleration = vmath.vector3(0, gravity, 0)
	if speed_diff ~= 0 then
		-- set the acceleration to work in the direction of the difference
		if speed_diff < 0 then
			acceleration.x = -move_acceleration
		else
			acceleration.x = move_acceleration
		end
		-- decrease the acceleration when air-borne to give a slower feel
		if not self.ground_contact then
			acceleration.x = air_acceleration_factor * acceleration.x
		end
	end
	-- calculate the velocity change this frame (dv is short for delta-velocity)
	local dv = acceleration * dt
	-- check if dv exceeds the intended speed difference, clamp it in that case
	if math.abs(dv.x) > math.abs(speed_diff) then
		dv.x = speed_diff
	end
	-- save the current velocity for later use
	-- (self.velocity, which right now is the velocity used the previous frame)
	local v0 = self.velocity
	-- calculate the new velocity by adding the velocity change
	self.velocity = self.velocity + dv
	-- calculate the translation this frame by integrating the velocity
	local dp = (v0 + self.velocity) * dt * 0.5
	-- apply it to the player character
	go.set_position(go.get_position() + dp)
	-- update the jump timer
	if self.touch_jump_timer > 0 then
		self.touch_jump_timer = self.touch_jump_timer - dt
	end

	update_animations(self)

	-- reset volatile state
	self.correction = vmath.vector3()
	self.move_input = 0
	self.ground_contact = false
	msg.post("/Player", hash("sword_speed"))
end

local function handle_obstacle_contact(self, normal, distance)
	-- project the correction vector onto the contact normal
	-- (the correction vector is the 0-vector for the first contact point)
	local proj = vmath.dot(self.correction, normal)
	-- calculate the compensation we need to make for this contact point
	local comp = (distance - proj) * normal
	-- add it to the correction vector
	self.correction = self.correction + comp
	-- apply the compensation to the player character
	go.set_position(go.get_position() + comp)
	-- check if the normal points enough up to consider the player standing on the ground
	-- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
	if normal.y > 0.7 then
		self.ground_contact = true
	end
	-- project the velocity onto the normal
	proj = vmath.dot(self.velocity, normal)
	-- if the projection is negative, it means that some of the velocity points towards the contact point
	if proj < 0 then
		-- remove that component in that case
		self.velocity = self.velocity - proj * normal
	end
end



local function jump(self)
	-- only allow jump from ground
	-- (extend this with a counter to do things like double-jumps)
	if self.ground_contact then
		-- set take-off speed
		self.velocity.y = jump_takeoff_speed
		-- play animation
		play_animation(self, anim_jump)
	end
end

local function abort_jump(self)
	-- cut the jump short if we are still going up
	if self.velocity.y > 0 then
		-- scale down the upwards speed
		self.velocity.y = self.velocity.y * 0.5
	end
end

function on_message(self, message_id, message, sender)
	-- check if we received a contact point message
	if message_id == msg_contact_point_response then
		if message.other_id == hash("/sword") then
			msg.post("/Player", hash("sword_speed"))
			self.hp = self.hp - math.abs(self.players_sword_speed) * 30
			if self.hp <= 0 then
				go.delete()
			end
			label.set_text("#hp", self.hp)
			msg.post("/Player", hash("hit_enemy_sword_knockback"), {message, self.players_sword_speed < 0})
		else
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	end
	if message_id == hash("sword_speed_return") then
		self.players_sword_speed = message[1]
	end
	if message_id == hash("trigger_response") then
		if sender == msg.url("#side") then
			if message.enter then
				self.side = true
			else
				self.side = false
			end
		end
	end
	if message_id == msg_contact_point_response then
		if message.other_group == hash("arrow") then
			self.hp = self.hp - 2
			go.delete(message.other_id)
			if self.hp <= 0 then
				go.delete()
			end
			label.set_text("#hp", self.hp)
			factory.create("/Player#marker spawner", message.position)
		end
	end
end
function ai(self, dt)
	
	self.minDist = self.minDist + math.random(-10, 10)
	self.minDist = math.min(math.max(self.minDist, minDist - randomness), minDist + randomness)
	local playerpos = go.get_position("/Player")
	local pos = go.get_position()
	if pos.x > playerpos.x then
		self.move_input = -1
		self.dir = self.move_input
	else
		self.move_input = 1
		self.dir = self.move_input
	end
	if math.abs(pos.x - playerpos.x) < self.minDist then
		if math.abs(pos.x - playerpos.x) < self.minDist - 10 then
			self.move_input = self.move_input * -1
		else
			self.move_input = 0
		end
	end
	if self.side then
		jump(self)
	end
	if math.abs(pos.x - playerpos.x) > spotDist then
		self.move_input = 0
	end
	if math.random(0, 10) == 0 then
		self.move_input = self.move_input * -1
	end
	if math.random(0, 20) == 0 then
		jump(self)
	end
end




	