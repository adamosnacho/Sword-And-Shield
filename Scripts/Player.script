-- player.script
camera = require "orthographic.camera"
-- these are the tweaks for the mechanics, feel free to change them for a different feeling
-- the acceleration to move right/left
local move_acceleration = 3500
-- acceleration factor to use when air-borne
local air_acceleration_factor = 0.8
-- max speed right/left
local max_speed = 200
-- gravity pulling the player down in pixel units
local gravity = -1000
-- take-off speed when jumping in pixel units
local jump_takeoff_speed = 300
-- time within a double tap must occur to be considered a jump (only used for mouse/touch controls)
local touch_jump_timeout = 0.2

local mouse sens = 4

-- pre-hashing ids improves performance
local msg_contact_point_response = hash("contact_point_response")
local msg_animation_done = hash("animation_done")
local group_obstacle = hash("obstacle")
local input_left = hash("Left")
local input_right = hash("Right")
local input_jump = hash("Jump")
local sword_speed = 0
function round(num, numDecimalPlaces)
	local mult = 10^(numDecimalPlaces or 0)
	return math.floor(num * mult + 0.5) / mult
end
function init(self)
	defos.set_cursor_visible(false)

	-- this lets us handle input in this script
	msg.post(".", "acquire_input_focus")
	-- initial player velocity
	self.velocity = vmath.vector3(0, 0, 0)
	-- support variable to keep track of collisions and separation
	self.correction = vmath.vector3()
	-- if the player stands on ground or not
	self.ground_contact = false
	-- movement input in the range [-1,1]
	self.move_input = 0
	-- the currently playing animation
	self.anim = nil
	-- timer that controls the jump-window when using mouse/touch
	self.touch_jump_timer = 0
	self.dir = 1
	self.tool_ang = 0
	self.cursor_y_vel = 0
	self.cursor_last = 0
	self.stamina = 200
	self.tool_time_out = 100
	self.can_tool = true
	self.tool = true
	self.hp = 100
	self.was60 = false
end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.anim ~= anim then
		-- tell the sprite to play the animation
		sprite.play_flipbook("#sprite", anim)
		-- remember which animation is playing
		self.anim = anim
	end
end

local function update_animations(self)
	-- make sure the player character faces the right way

	-- make sure the right animation is playing
	if self.ground_contact then
		if self.velocity.x == 0 then
		else
		end
	else
		if self.velocity.y > 0 then
			play_animation(self, anim_jump)
		else
			play_animation(self, anim_fall)
		end
	end
end
function fixed_update(self, dt)
	self.stamina = self.stamina + 0.4
end
function update(self, dt)
	x, y = defos.get_cursor_pos()
	self.cursor_y_vel =  -((y - 500) * (0.01 / sens))

	if self.stamina < 30 then
		self.tool = false
		self.was60 = true
	else
		if self.was60 then
			self.was60 = false
			self.tool = true
		end
		self.cursor_y_vel = math.min(math.max(self.cursor_y_vel, -0.4), 0.4)
	end
	self.cursor_y_vel = round(self.cursor_y_vel, 2)
	if self.can_tool then
		self.tool_ang = self.cursor_y_vel + self.tool_ang
	else
		self.cursor_y_vel = 0
	end
	defos.set_cursor_pos(500, 500)
	sword_speed = self.cursor_y_vel
	
	self.tool_ang = self.cursor_y_vel + self.tool_ang
	self.stamina = self.stamina - (math.abs(self.cursor_y_vel) * 8)

	self.stamina = math.min(math.max(self.stamina, 0), 200)
	self.hp = math.min(math.max(self.hp, 0), 100)
	if self.move_input == -1 then
		self.dir = self.move_input
	elseif self.move_input == 1 then
		self.dir = self.move_input
	end
	local swordrot = math.rad(0)
	if self.dir == -1 then
		swordrot = math.rad(180)
	end
	self.tool_ang = math.rad(math.min(math.max(math.deg(self.tool_ang), -80), 80))
	if self.tool then
		go.set_rotation(vmath.quat(), "/sword")
		go.set("/sword", "euler.z", math.deg(self.tool_ang))
		go.set("/sword", "euler.y", math.deg(swordrot))
		msg.post("/shield", "disable")
		msg.post("/sword", "enable")
	else
		go.set_rotation(vmath.quat(), "/sword")
		go.set("/shield", "euler.z", math.deg(self.tool_ang))
		go.set("/shield", "euler.y", math.deg(swordrot))
		msg.post("/shield", "enable")
		msg.post("/sword", "disable")
	end
	-- determine the target speed based on input
	local target_speed = self.move_input * max_speed
	-- calculate the difference between our current speed and the target speed
	local speed_diff = target_speed - self.velocity.x
	-- the complete acceleration to integrate over this frame
	local acceleration = vmath.vector3(0, gravity, 0)
	if speed_diff ~= 0 then
		-- set the acceleration to work in the direction of the difference
		if speed_diff < 0 then
			acceleration.x = -move_acceleration
		else
			acceleration.x = move_acceleration
		end
		-- decrease the acceleration when air-borne to give a slower feel
		if not self.ground_contact then
			acceleration.x = air_acceleration_factor * acceleration.x
		end
	end
	-- calculate the velocity change this frame (dv is short for delta-velocity)
	local dv = acceleration * dt
	-- check if dv exceeds the intended speed difference, clamp it in that case
	if math.abs(dv.x) > math.abs(speed_diff) then
		dv.x = speed_diff
	end
	-- save the current velocity for later use
	-- (self.velocity, which right now is the velocity used the previous frame)
	local v0 = self.velocity
	-- calculate the new velocity by adding the velocity change
	self.velocity = self.velocity + dv
	-- calculate the translation this frame by integrating the velocity
	local dp = (v0 + self.velocity) * dt * 0.5
	-- apply it to the player character
	go.set_position(go.get_position() + dp)
	-- update the jump timer
	if self.touch_jump_timer > 0 then
		self.touch_jump_timer = self.touch_jump_timer - dt
	end

	update_animations(self)

	-- reset volatile state
	self.correction = vmath.vector3()
	self.move_input = 0
	self.ground_contact = false
	msg.post("/HUD holder#HUD", hash("hp"), {self.hp})
end

local function handle_obstacle_contact(self, normal, distance)
	-- project the correction vector onto the contact normal
	-- (the correction vector is the 0-vector for the first contact point)
	local proj = vmath.dot(self.correction, normal)
	-- calculate the compensation we need to make for this contact point
	local comp = (distance - proj) * normal
	-- add it to the correction vector
	self.correction = self.correction + comp
	-- apply the compensation to the player character
	go.set_position(go.get_position() + comp)
	-- check if the normal points enough up to consider the player standing on the ground
	-- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
	if normal.y > 0.7 then
		self.ground_contact = true
	end
	-- project the velocity onto the normal
	proj = vmath.dot(self.velocity, normal)
	-- if the projection is negative, it means that some of the velocity points towards the contact point
	if proj < 0 then
		-- remove that component in that case
		self.velocity = self.velocity - proj * normal
	end
end

function on_message(self, message_id, message, sender)
	-- check if we received a contact point message
	if message_id == msg_contact_point_response then
		if message.other_id == hash("/sword") or message.other_id == hash("/shield") then
		else
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	end
	if message_id == hash("sword_speed") then
		msg.post(sender, hash("sword_speed_return"), {self.cursor_y_vel})
	end
	if message_id == hash("stamina") then
		msg.post(sender, hash("stamina_return"), {self.stamina})
	end
	if message_id == hash("hit_enemy_sword_knockback") then
		self.stamina = self.stamina - math.abs(self.cursor_y_vel * 90)
		factory.create("#marker spawner", message[1].positioÂ§n)
	end
	if message_id == msg_contact_point_response then
		if message.other_group == hash("arrow") then
			self.hp = self.hp - 10
		end
	end
end

local function jump(self)
	-- only allow jump from ground
	-- (extend this with a counter to do things like double-jumps)
	if self.ground_contact then
		-- set take-off speed
		self.velocity.y = jump_takeoff_speed
		-- play animation
		play_animation(self, anim_jump)
	end
end

local function abort_jump(self)
	-- cut the jump short if we are still going up
	if self.velocity.y > 0 then
		-- scale down the upwards speed
		self.velocity.y = self.velocity.y * 0.5
	end
end

function on_input(self, action_id, action)
	if action_id == input_left then
		self.move_input = self.move_input - action.value
	end
	if action_id == input_right then
		self.move_input = self.move_input + action.value
	end
	sprite.set_hflip("#sprite", self.dir < 0)
	if action_id == input_jump then
		if action.released then
			abort_jump(self)
		else
			jump(self)
		end
	end
	if action_id == hash("touch") and action.pressed then
		self.tool = false
	end
	if action_id == hash("touch") and action.released then
		self.tool = true
	end
end